# -----------------------------------------------
# --- GRAPH INDEXER -----------------------------
# -----------------------------------------------

# set indexer version
# go to https://github.com/graphprotocol/indexer/tree/main/docs/networks to check the latest configuration
INDEXER_VERSION=v0.21.4

# set indexer database version
DB_INDEXER_VERSION=16.1

# set indexer name
INDEXER_NAME=main

# set indexer network (arbitrum-one arbitrum-sepolia)
INDEXER_NETWORK=arbitrum-one

# set indexer host
# it requires reverse-proxy (https://github.com/DifferentialGraph/reverse-proxy)
# leave blank if you do not have it
INDEXER_HOST=sld.tld

# rpc used by indexer agent to open/close allocations on arbitrum-one
# leave blank if operating on the testnet
TXN_RPC_MAIN=https://arbitrum...

# rpc used by indexer agent to open/close allocations on arbitrum-sepolia
# leave blank if operating on the mainnet
TXN_RPC_TEST=https://arbitrum-sepolia...

# to do
APIKEY=


# -----------------------------------------------


# ethereum node or provider URL - [LEAVE BLANK]
NETWORK_PROVIDER=

# polling interval for the Ethereum provider
ETHEREUM_POLLING_INTERVAL=4000

# time (in seconds) after which transactions will be resubmitted with a higher gas price
GAS_INCREASE_TIMEOUT=240

# factor by which gas prices are increased when resubmitting transactions
GAS_INCREASE_FACTOR=1.2

# the maximum gas price (gwei) to use for transactions
GAS_PRICE_MAX=50

# the maximum base fee per gas (gwei) to use for transactions, for legacy transactions this will be treated as the max gas price
BASE_FEE_PER_GAS_MAX=

# the maximum number of transaction attempts (Use 0 for unlimited)
TRANSACTION_ATTEMPTS=0

# mnemonic for operator wallet - required for opening/closing allocation
MNEMONIC="copy here the mnemonic"

# indexer staking address
INDEXER_ADDRESS=0x0

# node IDs of Graph nodes to use for indexing (separated by commas)
INDEX_NODE_IDS=

# port to serve the indexer management API at
INDEXER_MANAGEMENT_PORT=8000

# port to serve Prometheus metrics at
METRICS_PORT=7300

# port to serve the network subgraph and other syncing data for indexer service at
SYNCING_PORT=8002

# log level
LOG_LEVEL=debug

# graph Node endpoint for querying subgraphs
# leave blank if running locally on the same machine
GRAPH_NODE_QUERY_ENDPOINT=

# graph Node endpoint for indexing statuses
# leave blank if running locally on the same machine
GRAPH_NODE_STATUS_ENDPOINT=

# graph Node endpoint for applying and updating subgraph deployments
# leave blank if running locally on the same machine
GRAPH_NODE_ADMIN_ENDPOINT=

# indexer endpoint for receiving requests from the network
# if blank and INDEXER_HOST is set it will be automatically filled
PUBLIC_INDEXER_URL=

# coordinates describing the Indexer's location using latitude and longitude
INDEXER_GEO_COORDINATES="00.000 00.000"

# restake claimed indexer rewards, if set to 'false' rewards will be returned to the wallet
RESTAKE_REWARDS=true

# indexer agent allocation management automation mode
ALLOCATION_MANAGEMENT=auto

# minimum number of allocation transactions inside a batch for auto allocation management. No obvious upperbound, with default of 1
AUTO_ALLOCATION_MIN_BATCH_SIZE=1

# network subgraph deployment - [LEAVE BLANK]
NETWORK_SUBGRAPH_DEPLOYMENT=

# endpoint to query the network subgraph from - [LEAVE BLANK]
NETWORK_SUBGRAPH_ENDPOINT=

# whether to allocate to the network subgraph
ALLOCATE_ON_NETWORK_SUBGRAPH=false

# endpoint to query the epoch block oracle subgraph from - [LEAVE BLANK]
EPOCH_SUBGRAPH_ENDPOINT=

# default amount of GRT to allocate to a subgraph deployment 
DEFAULT_ALLOCATION_AMOUNT=0.01

# whether to register the indexer on chain
REGISTER=true

# minimum value of rebate for a single allocation (in GRT) in order for it to be included in a batch rebate claim on-chain
REBATE_CLAIM_THRESHOLD=1

# minimum total value of all rebates in an batch (in GRT) before the batch is claimed on-chain
REBATE_CLAIM_BATCH_THRESHOLD=5

# maximum number of rebates inside a batch. Upper bound is constrained by available system memory, and by the block gas limit
REBATE_CLAIM_MAX_BATCH_SIZE=100

# minimum value of rebate for a single allocation (in GRT) in order for it to be included in a batch rebate claim on-chain
VOUCHER_REDEMPTION_THRESHOLD=1

# minimum total value of all rebates in an batch (in GRT) before the batch is claimed on-chain
VOUCHER_REDEMPTION_BATCH_THRESHOLD=5

# maximum number of rebates inside a batch. Upper bound is constrained by available system memory, and by the block gas limit
VOUCHER_REDEMPTION_MAX_BATCH_SIZE=100

# gateway endpoint base URL - [LEAVE BLANK]
GATEWAY_ENDPOINT=

# to do
COLLECT_RECEIPTS_ENDPOINT=

# inject the GRT to DAI/USDC conversion rate into cost model variables
INJECT_DAI=false

# postgres host
POSTGRES_HOST=

# postgres port
POSTGRES_PORT=

# user in the postgres database used by the indexer agent/service
POSTGRES_USERNAME=db_user

# password for the previously defined in the postgres database used by the indexer agent/service
POSTGRES_PASSWORD=db_pass

# name of the postgres database used by the indexer agent/service
POSTGRES_DATABASE=indexer_db

# postgres maximum connection pool size
POSTGRES_POOL_SIZE=50

# the number of epochs in the past to look for potential POI disputes
POI_DISPUTABLE_EPOCHS=1

# monitor the network for potential POI disputes
POI_DISPUTE_MONITORING=false

# subgraphs to index that are not on chain (comma-separated)
OFFCHAIN_SUBGRAPHS=

# address of the DAI or USDC contract to use for the --inject-dai conversion rate - [LEAVE BLANK]
DAI_CONTRACT=

# Port to serve queries at
QUERY_PORT=

# Log time spent on each query received
QUERY_TIMING_LOGS=false

# Bearer token to require for /network queries
NETWORK_SUBGRAPH_AUTH_TOKEN=

# Whether to serve the network subgraph at /network
SERVE_NETWORK_SUBGRAPH=false

# Interval (in ms) for syncing indexer allocations from the network
ALLOCATION_SYNCING_INTERVAL=120000

# Whether to enable Google Cloud profiling
GCLOUD_PROFILING=false

# Auth token that clients can use to query for free
FREE_QUERY_AUTH_TOKEN=

# Address that signs query fee receipts from a known client - [LEAVE BLANK]
CLIENT_SIGNER_ADDRESS=

# how many blocks subgraphs are allowed to stay behind chain head
SUBGRAPH_MAX_BLOCK_DISTANCE=1000

# how long to wait before retrying subgraph query if it is not fresh
SUBGRAPH_FRESHNESS_SLEEP_MILLESECONDS=10000

# endpoint to query the tap subgraph from
TAP_SUBGRAPH_ENDPOINT=

# graph contracts address book file path
ADDRESS_BOOK=

# TAP contracts address book file path
TAP_ADDRESS_BOOK=

# the time in seconds that the chain finalizes blocks
CHAIN_FINALIZE_TIME=