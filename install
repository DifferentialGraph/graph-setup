#!/bin/bash -i

basics-install() {
    apt update
    apt -y install ca-certificates curl grep git apache2-utils
}

docker-install() {
    if ! grep -q "docker" <<< $(find /etc/apt/ -name *.list | xargs cat | grep  ^[[:space:]]*deb | grep -v deb-src); then
        echo "Installing Docker..."
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt update && apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
        apt -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
    fi
}

nodejs-install() {
    if [ ! -d "$HOME/.nvm" ]; then
        echo "Installing NVM..."
        apt -y install curl grep
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
        source $HOME/.bashrc
        nvm install --lts
        nvm use --lts
    fi

    if [ `npm list -g | grep -c pino-pretty` -eq 0 ]; then
        echo "Installing Pino Pretty..."
        npm install -g pino-pretty
    fi
}

reverseproxy-check() {
    if [ "$( docker container inspect -f '{{.State.Running}}' nginx-proxy )" = "false" ] || [ "$( docker container inspect -f '{{.State.Running}}' nginx-ssl )" = "false" ]; then
        return 1
    fi
}

edit-var() # file to edit - var to edit - var arg
{
    sed -i "s/^${2}=.*/${2}=$(echo "${3}" | sed 's/[&/\]/\\&/g')/" ${1}
}

indexer-env()
{
    [ -f "envs/indexer.env" ] || { echo "Error: user indexer.env file not found"; return 1; }
    source envs/indexer.env
    cp envs/indexer.env envs/indexer-$INDEXER_NAME.env

    INDEXER_ENV="envs/indexer-$INDEXER_NAME.env"

    if [ ! -z $INDEXER_HOST ]; then
        edit-var $INDEXER_ENV "PUBLIC_INDEXER_URL" "https://index-$INDEXER_NAME.$INDEXER_HOST/"
    fi

    if [ -z $GRAPH_NODE_QUERY_ENDPOINT ]; then
        edit-var $INDEXER_ENV "GRAPH_NODE_QUERY_ENDPOINT" "http://query-node:8000"
    fi

    if [ -z $GRAPH_NODE_STATUS_ENDPOINT ]; then
        edit-var $INDEXER_ENV "GRAPH_NODE_STATUS_ENDPOINT" "http://index-node:8030/graphql"
    fi

    if [ -z $GRAPH_NODE_QUERY_ENDPOINT ]; then
        edit-var $INDEXER_ENV "GRAPH_NODE_ADMIN_ENDPOINT" "http://index-node:8020"
    fi

    if [ -z $SERVICE_QUERY_PORT ]; then
        edit-var $INDEXER_ENV "SERVICE_QUERY_PORT" "7600"
    fi

    if [ -z $POSTGRES_HOST ]; then
        edit-var $INDEXER_ENV "POSTGRES_HOST" "${INDEXER_NAME}-postgres-indexer"
    fi

    case $INDEXER_NETWORK in
        "arbitrum-one")
            edit-var $INDEXER_ENV "NETWORK_PROVIDER" "$TXN_RPC_MAIN"

            edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_DEPLOYMENT" "QmUzRg2HHMpbgf6Q4VHKNDbtBEJnyp5JWCh2gUX9AV6jXv"
            if [ -z $NETWORK_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/DZz4kDTdmzWLWsV373w2bSmoar3umKKH9y82SUKr5qmp"
            fi

            if [ -z $TAP_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "TAP_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4sukbNVTzGELnhdnpyPqsf1QqtzNHEYKKmJkgaT8z6M1"
            fi

            edit-var $INDEXER_ENV "EPOCH_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4KFYqUWRTZQ9gn7GPHC6YQ2q15chJfVrX43ezYcwkgxB"

            edit-var $INDEXER_ENV "DAI_CONTRACT" "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"

            edit-var $INDEXER_ENV "GATEWAY_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/"

            edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_DEPLOYMENT" "QmUhiH6Z5xo6o3GNzsSvqpGKLmCt6w5WzKQ1yHk6C8AA8S"
            if [ -z $ESCROW_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4sukbNVTzGELnhdnpyPqsf1QqtzNHEYKKmJkgaT8z6M1"
            fi

            if [ -z $BLOCKCHAIN_CHAIN_ID ]; then
                edit-var $INDEXER_ENV "BLOCKCHAIN_CHAIN_ID" "42161"
            fi

            edit-var $INDEXER_ENV "BLOCKCHAIN_RECEIPTS_VERIFIER_ADDRESS" "0x33f9E93266ce0E108fc85DdE2f71dab555A0F05a"
            ;;
        "arbitrum-sepolia")
            edit-var $INDEXER_ENV "NETWORK_PROVIDER" "$TXN_RPC_MAIN"

            edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_DEPLOYMENT" "QmSWxvd8SaQK6qZKJ7xtfxCCGoRzGnoi2WNzmJYYJW9BXY"
            if [ -z $NETWORK_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/DZz4kDTdmzWLWsV373w2bSmoar3umKKH9y82SUKr5qmp"
            fi

            if [ -z $TAP_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "TAP_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4sukbNVTzGELnhdnpyPqsf1QqtzNHEYKKmJkgaT8z6M1"
            fi

            edit-var $INDEXER_ENV "EPOCH_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4KFYqUWRTZQ9gn7GPHC6YQ2q15chJfVrX43ezYcwkgxB"

            edit-var $INDEXER_ENV "DAI_CONTRACT" "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"

            edit-var $INDEXER_ENV "GATEWAY_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/"

            edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_DEPLOYMENT" "QmUhiH6Z5xo6o3GNzsSvqpGKLmCt6w5WzKQ1yHk6C8AA8S"
            if [ -z $ESCROW_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4sukbNVTzGELnhdnpyPqsf1QqtzNHEYKKmJkgaT8z6M1"
            fi

            if [ -z $BLOCKCHAIN_CHAIN_ID ]; then
                edit-var $INDEXER_ENV "BLOCKCHAIN_CHAIN_ID" "42161"
            fi

            edit-var $INDEXER_ENV "BLOCKCHAIN_RECEIPTS_VERIFIER_ADDRESS" "0x33f9E93266ce0E108fc85DdE2f71dab555A0F05a"
            ;;
        *)
            echo "Error: network not supported." >&2
            return 1
            ;;
    esac
}

node-config()
{
# Datbase
cat <<EOF >$1
[store]
[store.primary]
connection = "postgresql://${DB_NODE_USER}:${DB_NODE_PASS}@:5432/${DB_NODE_NAME}?host=/var/run/postgresql"
pool_size = 10

[chains]
ingestor = "index_node"

EOF

# Chains
for (( j=0; j<${#CHAIN_NAME[@]}; j++ ));
do
if [  "${CHAIN_RPC[$j]%%:*}" == "http" ] || [ "${CHAIN_RPC[$j]%%:*}" == "https" ]; then
	TRANSPORT="rpc"
elif [ "${CHAIN_RPC[$j]%%:*}" == "ws" ] || [ "${CHAIN_RPC[$j]%%:*}" == "wss" ]; then 
	TRANSPORT="ws"
else
	{ echo "Error: unknown URL"; return 1; }
fi
cat <<EOF >>$1
[chains.${CHAIN_NAME[$j]}]
shard = "primary"
provider = [ { label = "${CHAIN_NAME[$j]}", url = "${CHAIN_RPC[$j]}", transport = "$TRANSPORT", features = ["archive", "traces"] } ]

EOF
done

# Deployment
cat <<EOF >>$1
[deployment]
[[deployment.rule]]
indexers = [ "index_node" ]

[general]
query = "query_node"
EOF
}

graphnode-install() {
    whiptail --title "Graph Setup" --yesno "Install graph node?" 8 78 || { echo "User exit"; return; }
    [ -f "envs/node.env" ] || { echo "Error: user node.env file not found"; return 1; }
    source envs/node.env

    docker volume create graph-node_config
    NODE_CONFIG_FILE=/var/lib/docker/volumes/graph-node_config/_data/config.toml
    node-config $NODE_CONFIG_FILE

    COMPOSE_FILE=services/node.yml \
    COMPOSE_IGNORE_ORPHANS=True \
    docker compose --env-file envs/node.env up -d --force-recreate --build

    for node in "${CHAIN_NAME[@]}"; do
        [ "$(docker network ls -f name=$node -q)" ] && docker network connect $node index-node && docker network connect $node query-node
    done

    if [ -n  $NODE_HOST ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running" ; return; }
        docker network connect reverse-proxy index-node && docker network connect reverse-proxy query-node

        if [ ! -z $WHITELIST ]; then
            VHOST_PATH=/var/lib/docker/volumes/reverse-proxy_vhost/_data
            for (( j=0; j<${#WHITELIST[@]}; j++ )); do
                echo "allow ${WHITELIST[$j]};" >> ${VHOST_PATH}/thegraph.${NODE_HOST}
            done
            echo "deny all;" >> ${VHOST_PATH}/thegraph.${NODE_HOST}
        fi
    fi
}

graphindexer-install() {
    whiptail --title "Graph Setup" --yesno "Install graph indexer?" 8 78 || { echo "User exit"; return; }
    indexer-env || { echo "Error: could not generate indexer env file"; return 1; }

    COMPOSE_FILE=services/indexer.yml \
    COMPOSE_IGNORE_ORPHANS=True \
    docker compose --env-file envs/indexer-$INDEXER_NAME.env up -d --force-recreate --build
    touch /var/lib/docker/volumes/${INDEXER_NAME}-indexer_cli-history/_data/.bash_history

    if [ "$( docker container inspect -f '{{.State.Running}}' index-node )" = "true" ] && [ "$( docker container inspect -f '{{.State.Running}}' query-node )" = "true" ]; then
        docker network connect graph-node $INDEXER_NAME-indexer-service && docker network connect graph-node $INDEXER_NAME-indexer-tap && docker network connect graph-node $INDEXER_NAME-indexer-agent && docker network connect graph-node $INDEXER_NAME-indexer-cli
    fi

    if [ -n  $INDEXER_HOST ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running" ; return; }
        docker network connect reverse-proxy $INDEXER_NAME-indexer-service
    fi
}

graphmonitor-install() {
    whiptail --title "Graph Setup" --yesno "Install graph monitor?" 8 78 || { echo "User exit"; return; }
    
    [ -f "envs/monitor.env" ] || { echo "Error: user monitor.env file not found"; return 1; }
    source envs/monitor.env
    [ -f "envs/indexer-$MONITOR_INDEXER.env" ] || { echo "Error: user indexer-$MONITOR_INDEXER.env file not found"; return 1; }
    [ -f "envs/node.env" ] || { echo "Error: user node.env file not found"; return 1; }
    source envs/node.env

    if [ ! -z $MONITOR_HOST ]; then
        sed -i "s/^GRAFANA_HOST=.*/GRAFANA_HOST=$(echo "dashboard-$MONITOR_INDEXER.$MONITOR_HOST" | sed 's/[&/\]/\\&/g')/" "envs/monitor.env"
        sed -i "s/^PROMETHEUS_HOST=.*/PROMETHEUS_HOST=$(echo "prometheus-$MONITOR_INDEXER.$MONITOR_HOST" | sed 's/[&/\]/\\&/g')/" "envs/monitor.env"
    else
        echo "to do"
    fi
    export MONITOR_INDEXER
    # Prometheus
    docker volume create ${MONITOR_INDEXER}-monitor_prometheus-config
    cp prometheus/alert.rules /var/lib/docker/volumes/${MONITOR_INDEXER}-monitor_prometheus-config/_data/alert.rules
    envsubst < prometheus/prometheus.yml > /var/lib/docker/volumes/${MONITOR_INDEXER}-monitor_prometheus-config/_data/prometheus.yml

    # Grafana
    docker volume create ${MONITOR_INDEXER}-monitor_grafana-provisioning
    cp -R grafana/dashboards/ grafana/datasources/ /var/lib/docker/volumes/${MONITOR_INDEXER}-monitor_grafana-provisioning/_data
    # envsubst < grafana/dashboards/indexing-performance-metrics.json > /var/lib/docker/volumes/${MONITOR_INDEXER}-monitor_grafana-provisioning/_data/dashboards/indexing-performance-metrics.json

    # Alertmanager
    docker volume create ${MONITOR_INDEXER}-monitor_alertmanager-config
    cp alertmanager/config.yml /var/lib/docker/volumes/${MONITOR_INDEXER}-monitor_alertmanager-config/_data

    COMPOSE_FILE=services/monitor.yml \
    COMPOSE_IGNORE_ORPHANS=True \
    docker compose --env-file envs/monitor.env --env-file envs/node.env --env-file envs/indexer-$MONITOR_INDEXER.env up -d --force-recreate --build

    if [ "$( docker container inspect -f '{{.State.Running}}' index-node )" = "true" ] && [ "$( docker container inspect -f '{{.State.Running}}' query-node )" = "true" ] && [ "$( docker container inspect -f '{{.State.Running}}' postgres-node )" = "true" ]; then
        docker network connect graph-node ${MONITOR_INDEXER}-monitor-prometheus && docker network connect graph-node ${MONITOR_INDEXER}-monitor-grafana
    fi

    if [ "$( docker container inspect -f '{{.State.Running}}' ${MONITOR_INDEXER}-indexer-service )" = "true" ]; then
        docker network connect ${MONITOR_INDEXER}-indexer ${MONITOR_INDEXER}-monitor-prometheus
    fi

    if [ -n  $MONITOR_HOST ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running" ; return; }
        docker network connect reverse-proxy ${MONITOR_INDEXER}-monitor-prometheus && docker network connect reverse-proxy ${MONITOR_INDEXER}-monitor-grafana
        htpasswd -c -b /var/lib/docker/volumes/reverse-proxy_htpasswd/_data/prometheus-${MONITOR_INDEXER}.${MONITOR_HOST} $PROMETHEUS_USER $PROMETHEUS_PASS
    fi

    sleep 5
    source envs/node.env
    docker exec -it postgres-node psql -U ${DB_NODE_USER} ${DB_NODE_NAME} -c "refresh materialized view info.subgraph_sizes;"
    unset MONITOR_INDEXER
}


if [ "${1}" != "--source" ]; then
    apt update && apt install -y whiptail
    whiptail --title "Graph Setup" --yesno "Install graph setup?" 8 78 || { echo "User exit"; exit 1; }

    basics-install || { echo "Error: could not install basic tools"; exit 1; }

    docker-install || { echo "Error: could not install Docker"; exit 1; }

    nodejs-install || { echo "Error: could not install Node.js"; exit 1; }

    graphnode-install || { echo "Error: could not install graph node"; exit 1; }

    graphindexer-install || { echo "Error: could not install graph indexer"; exit 1; }

    graphmonitor-install || { echo "Error: could not install graph monitor"; exit 1; }

    if ! grep -q "#graph-setup" ~/.bashrc; then
        echo "Modifying .bashrc ..."
        DIR="$( cd "$( dirname -- $0 )" && pwd )"
        echo -e "\n" >> ~/.bashrc
        echo "#graph-setup" >> ~/.bashrc
        echo "export GRAPH_DIR=$DIR" >> ~/.bashrc
        echo 'source $GRAPH_DIR/utils/manage' >> ~/.bashrc
        source ~/.bashrc
    fi
fi
