#!/bin/bash -i
GRAPHDIR="$(cd "$(dirname "${BASH_SOURCE[0]:-${(%):-%x}}")" && pwd)"
source $GRAPHDIR/utils/docker

# -----------------------------------------------
# --- PRELIMINARIES -----------------------------
# -----------------------------------------------
basics-install() {
    apt update
    apt -y install ca-certificates curl grep git apache2-utils
}

docker-install() {
    if ! grep -q "docker" <<< $(find /etc/apt/ -name *.list | xargs cat | grep  ^[[:space:]]*deb | grep -v deb-src); then
        echo "Installing Docker..."
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt update && apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
        apt -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
    fi
}

nodejs-install() {
    if [ ! -d "$HOME/.nvm" ]; then
        echo "Installing NVM..."
        apt -y install curl grep
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
        source $HOME/.bashrc
        nvm install --lts
        nvm use --lts
    fi

    if [ `npm list -g | grep -c pino-pretty` -eq 0 ]; then
        echo "Installing Pino Pretty..."
        npm install -g pino-pretty
    fi
}

reverseproxy-check() {
    if [ "$( docker container inspect -f '{{.State.Running}}' nginx-proxy )" = "false" ] || [ "$( docker container inspect -f '{{.State.Running}}' nginx-ssl )" = "false" ]; then
        return 1
    fi
}

edit-var() # file to edit - var to edit - var arg
{
    sed -i "s/^${2}=.*/${2}=$(echo "${3}" | sed 's/[&/\]/\\&/g')/" ${1}
}


# -----------------------------------------------
# --- GRAPH NODE --------------------------------
# -----------------------------------------------
generate-node-config()
{
# Datbase
cat <<EOF >$1
[store]
[store.primary]
connection = "postgresql://${DB_NODE_USER}:${DB_NODE_PASS}@:5432/${DB_NODE_NAME}?host=/var/run/postgresql"
pool_size = 10

[chains]
ingestor = "index_node"

EOF

# Chains
[ -n "$ZSH_VERSION" ] && setopt KSH_ARRAYS
for (( j=0; j<${#CHAIN_NAME[@]}; j++ )); do
if [ "${CHAIN_RPC[$j]%%:*}" = "http" ] || [ "${CHAIN_RPC[$j]%%:*}" = "https" ]; then
	TRANSPORT="rpc"
elif [ "${CHAIN_RPC[$j]%%:*}" = "ws" ] || [ "${CHAIN_RPC[$j]%%:*}" = "wss" ]; then 
	TRANSPORT="ws"
else
	{ echo "Error: unknown URL"; return 1; }
fi
cat <<EOF >>$1
[chains.${CHAIN_NAME[$j]}]
shard = "primary"
provider = [ { label = "${CHAIN_NAME[$j]}", url = "${CHAIN_RPC[$j]}", transport = "$TRANSPORT", features = ["archive", "traces"] } ]

EOF
done

# Deployment
cat <<EOF >>$1
[deployment]
[[deployment.rule]]
indexers = [ "index_node" ]

[general]
query = "query_node"
EOF
}

node-start() {
    # check and load environment file for graph node
    [ -f "$GRAPHDIR/envs/node.env" ] || { echo "Error: user node.env file not found"; return 1; }
    source $GRAPHDIR/envs/node.env

    # generate graph node configuration file
    if ! volume-exists graph-node_config; then
        docker volume create graph-node_config
    fi
    NODE_CONFIG_FILE=/var/lib/docker/volumes/graph-node_config/_data/config.toml
    generate-node-config $NODE_CONFIG_FILE

    # run graph node service
    COMPOSE_FILE=$GRAPHDIR/services/node.yml \
    COMPOSE_IGNORE_ORPHANS=True \
    docker compose --env-file $GRAPHDIR/envs/node.env up -d --force-recreate --build

    # attach graph node to reverse proxy
    if [ -n  $NODE_HOST ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running" ; return; }
        docker network connect reverse-proxy index-node && docker network connect reverse-proxy query-node

        # create whitelist for graph node
        if [ ! -z $WHITELIST ]; then
            VHOST_PATH=/var/lib/docker/volumes/reverse-proxy_vhost/_data
            [ -f "${VHOST_PATH}/query-node.${NODE_HOST}" ] && rm ${VHOST_PATH}/query-node.${NODE_HOST}
            [ -f "${VHOST_PATH}/index-node.${NODE_HOST}" ] && rm ${VHOST_PATH}/index-node.${NODE_HOST}
            for (( j=0; j<${#WHITELIST[@]}; j++ )); do
                echo "allow ${WHITELIST[$j]};" >> ${VHOST_PATH}/query-node.${NODE_HOST}
                echo "allow ${WHITELIST[$j]};" >> ${VHOST_PATH}/index-node.${NODE_HOST}
            done
            echo "deny all;" >> ${VHOST_PATH}/query-node.${NODE_HOST}
            echo "deny all;" >> ${VHOST_PATH}/index-node.${NODE_HOST}
        fi
    fi
}

graphnode-install() {
    whiptail --title "Graph Setup" --yesno "Install graph node?" 8 78 || { echo "User exit"; return; }
    node-start || { return 1; }
}


# -----------------------------------------------
# --- GRAPH INDEXER -----------------------------
# -----------------------------------------------
generate-indexer-env()
{
    INDEXER_ENV="envs/${1}.env"

    [ -f "${INDEXER_ENV}" ] || { echo "Error: indexer env file not found"; return 1; }
    source ${INDEXER_ENV}

    if [ ! -z $INDEXER_HOST ]; then
        edit-var $INDEXER_ENV "PUBLIC_INDEXER_URL" "https://index-$INDEXER_NAME.$INDEXER_HOST/"
    fi

    if [ -z $GRAPH_NODE_QUERY_ENDPOINT ]; then
        edit-var $INDEXER_ENV "GRAPH_NODE_QUERY_ENDPOINT" "http://query-node:8000"
    fi

    if [ -z $GRAPH_NODE_STATUS_ENDPOINT ]; then
        edit-var $INDEXER_ENV "GRAPH_NODE_STATUS_ENDPOINT" "http://index-node:8030/graphql"
    fi

    if [ -z $GRAPH_NODE_QUERY_ENDPOINT ]; then
        edit-var $INDEXER_ENV "GRAPH_NODE_ADMIN_ENDPOINT" "http://index-node:8020"
    fi

    if [ -z $SERVICE_QUERY_PORT ]; then
        edit-var $INDEXER_ENV "SERVICE_QUERY_PORT" "7600"
    fi

    if [ -z $DB_INDEXER_HOST ]; then
        edit-var $INDEXER_ENV "DB_INDEXER_HOST" "${INDEXER_NAME}-postgres-indexer"
    fi

    case $INDEXER_NETWORK in
        "arbitrum-one")
            edit-var $INDEXER_ENV "NETWORK_PROVIDER" "$TXN_RPC_MAIN"

            edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_DEPLOYMENT" "QmdKXcBUHR3UyURqVRQHu1oV6VUkBrhi2vNvMx3bNDnUCc"
            if [ -z $NETWORK_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/DZz4kDTdmzWLWsV373w2bSmoar3umKKH9y82SUKr5qmp"
            fi

            edit-var $INDEXER_ENV "TAP_SUBGRAPH_DEPLOYMENT" "QmUhiH6Z5xo6o3GNzsSvqpGKLmCt6w5WzKQ1yHk6C8AA8S"
            if [ -z $TAP_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "TAP_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4sukbNVTzGELnhdnpyPqsf1QqtzNHEYKKmJkgaT8z6M1"
            fi

            edit-var $INDEXER_ENV "EPOCH_SUBGRAPH_DEPLOYMENT" "QmW26TG5s9myd1gzio9fkgVHEEjZ7u5ktWDpkNePzbusNo"
            if [ -z $EPOCH_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "EPOCH_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4KFYqUWRTZQ9gn7GPHC6YQ2q15chJfVrX43ezYcwkgxB"
            fi

            edit-var $INDEXER_ENV "DAI_CONTRACT" "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"

            edit-var $INDEXER_ENV "GATEWAY_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/"

            edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_DEPLOYMENT" "QmUhiH6Z5xo6o3GNzsSvqpGKLmCt6w5WzKQ1yHk6C8AA8S"
            if [ -z $ESCROW_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/4sukbNVTzGELnhdnpyPqsf1QqtzNHEYKKmJkgaT8z6M1"
            fi

            if [ -z $BLOCKCHAIN_CHAIN_ID ]; then
                edit-var $INDEXER_ENV "BLOCKCHAIN_CHAIN_ID" "42161"
            fi

            edit-var $INDEXER_ENV "BLOCKCHAIN_RECEIPTS_VERIFIER_ADDRESS" "0x33f9E93266ce0E108fc85DdE2f71dab555A0F05a"

            edit-var $INDEXER_ENV "TAP_SENDER_AGGREGATOR_ENDPOINTS" "\"0xDDE4cfFd3D9052A9cb618fC05a1Cd02be1f2F467 = \"https://tap-aggregator.network.thegraph.com\"\""
            ;;
        "arbitrum-sepolia")
            edit-var $INDEXER_ENV "NETWORK_PROVIDER" "$TXN_RPC_TEST"

            edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_DEPLOYMENT" "QmXnGVrg6DvscnvJd86aHAPLGyGrkM17weMrAsFAEMmQLL"
            if [ -z $NETWORK_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "NETWORK_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/3xQHhMudr1oh69ut36G2mbzpYmYxwqCeU6wwqyCDCnqV"
            fi

            edit-var $INDEXER_ENV "TAP_SUBGRAPH_DEPLOYMENT" "QmUiLdbsk6c51UMdcNBxsP3KadJpkmp6a3k2NCprR4ZFeM"
            if [ -z $TAP_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "TAP_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/7ubx365MiqBH5iUz6XWXWT8PTof5BVAyEzdb8m17RvbD"
            fi

            edit-var $INDEXER_ENV "EPOCH_SUBGRAPH_DEPLOYMENT" "QmNNn48AU8CZei8sYLXrXABMHkiXAuQDvFaZHYYPryKEvF"
            if [ -z $EPOCH_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "EPOCH_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/BhnsdeZihU4SuokxZMLF4FQBVJ3jgtZf6v51gHvz3bSS"
            fi

            edit-var $INDEXER_ENV "DAI_CONTRACT" "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"

            edit-var $INDEXER_ENV "GATEWAY_ENDPOINT" "https://gateway-arbitrum.testnet.thegraph.com/"

            edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_DEPLOYMENT" "QmUiLdbsk6c51UMdcNBxsP3KadJpkmp6a3k2NCprR4ZFeM"
            if [ -z $ESCROW_SUBGRAPH_ENDPOINT ]; then
                edit-var $INDEXER_ENV "ESCROW_SUBGRAPH_ENDPOINT" "https://gateway-arbitrum.network.thegraph.com/api/$APIKEY/subgraphs/id/7ubx365MiqBH5iUz6XWXWT8PTof5BVAyEzdb8m17RvbD"
            fi

            if [ -z $BLOCKCHAIN_CHAIN_ID ]; then
                edit-var $INDEXER_ENV "BLOCKCHAIN_CHAIN_ID" "421614"
            fi

            edit-var $INDEXER_ENV "BLOCKCHAIN_RECEIPTS_VERIFIER_ADDRESS" "0xfC24cE7a4428A6B89B52645243662A02BA734ECF"

            edit-var $INDEXER_ENV "TAP_SENDER_AGGREGATOR_ENDPOINTS" "\"0xC3dDf37906724732FfD748057FEBe23379b0710D = \"https://tap-aggregator.testnet.thegraph.com\"\""
            ;;
        *)
            echo "Error: network not supported." >&2
            return 1
            ;;
    esac
}

indexer-start() {
    [ -z $1 ] && { echo "Error: select indexer env"; return; }
    [ -f "$GRAPHDIR/envs/$1.env" ] || { echo "Error: user $1.env file not found"; return 1; }
    source $GRAPHDIR/envs/$1.env

    # create volume for configuration file indexer tap and service
    if ! volume-exists ${INDEXER_NAME}-indexer_config; then
        docker volume create ${INDEXER_NAME}-indexer_config
    fi
    cp $GRAPHDIR/config/indexer-config.toml /var/lib/docker/volumes/${INDEXER_NAME}-indexer_config/_data

    # start indexer service
    COMPOSE_FILE=$GRAPHDIR/services/indexer.yml \
    COMPOSE_IGNORE_ORPHANS=True \
    INDEXER_ENV=$GRAPHDIR/envs/${1}.env \
    docker compose --env-file $GRAPHDIR/envs/$1.env up -d --force-recreate --build

    # generate cli hitory file
    [ -f /var/lib/docker/volumes/${INDEXER_NAME}-indexer_cli-history/_data/.bash_history ] && touch /var/lib/docker/volumes/${INDEXER_NAME}-indexer_cli-history/_data/.bash_history

    sleep 5s

    # connect indexer services to graph node
    # if [ "$( docker container inspect -f '{{.State.Running}}' index-node )" = "true" ] && [ "$( docker container inspect -f '{{.State.Running}}' query-node )" = "true" ]; then
    if [ "$(docker network ls | grep graph-node)" ]; then
        nets=$(container-networks $INDEXER_NAME-indexer-service)
        [[ ! ${nets[@]} =~ "graph-node" ]] && docker network connect graph-node $INDEXER_NAME-indexer-service
        nets=$(container-networks $INDEXER_NAME-indexer-tap)
        [[ ! ${nets[@]} =~ "graph-node" ]] && docker network connect graph-node $INDEXER_NAME-indexer-tap
        nets=$(container-networks $INDEXER_NAME-indexer-agent)
        [[ ! ${nets[@]} =~ "graph-node" ]] && docker network connect graph-node $INDEXER_NAME-indexer-agent
        nets=$(container-networks $INDEXER_NAME-indexer-cli)
        [[ ! ${nets[@]} =~ "graph-node" ]] && docker network connect graph-node $INDEXER_NAME-indexer-cli
    fi

    # connect indexer service to reverse proxy
    if [ -n  $INDEXER_HOST ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running" ; return; }
        nets=$(container-networks $INDEXER_NAME-indexer-service)
        [[ ! ${nets[@]} =~ "reverse-proxy" ]] && docker network connect reverse-proxy $INDEXER_NAME-indexer-service
    fi
}

graphindexer-install() {
    whiptail --title "Graph Setup" --yesno "Install graph indexer?" 8 78 || { echo "User exit"; return; }
    INDEXER_ENV_NAME=$(whiptail --title "Graph Setup" --inputbox "Enter indexer environment name" 8 78 "indexer" 3>&1 1>&2 2>&3)
    generate-indexer-env $INDEXER_ENV_NAME || { echo "Error: could not generate indexer env file"; return 1; }
    indexer-start $INDEXER_ENV_NAME
}


# -----------------------------------------------
# --- GRAPH MONITOR -----------------------------
# -----------------------------------------------
gen-prometheus-config() {
if [ -n "${INDEX_NODE_URL}" ]; then
cat <<EOF >>$1

  - job_name: 'index-node'
    scrape_interval: 5s
    static_configs:
      - targets: ['${INDEX_NODE_URL}']
EOF
fi

if [ -n "${QUERY_NODE_URL}" ]; then
cat <<EOF >>$1

  - job_name: 'query-node'
    scrape_interval: 5s
    static_configs:
      - targets: ['${QUERY_NODE_URL}']
EOF
fi

if [ -n "${INDEXER_SERVICE_URL}" ]; then
cat <<EOF >>$1

  - job_name: 'indexer-service'
    scrape_interval: 5s
    static_configs:
      - targets: ['${INDEXER_SERVICE_URL}']
EOF
fi

if [ -n "${INDEXER_TAP_URL}" ]; then
cat <<EOF >>$1

  - job_name: 'indexer-tap'
    scrape_interval: 5s
    static_configs:
      - targets: ['${INDEXER_TAP_URL}']
EOF
fi

if [ -n "${INDEXER_AGENT_URL}" ]; then
cat <<EOF >>$1

  - job_name: 'indexer-agent'
    scrape_interval: 5s
    static_configs:
      - targets: ['${INDEXER_AGENT_URL}']
EOF
fi
}

monitor-start() {
    [ -f "$GRAPHDIR/envs/monitor.env" ] || { echo "Error: user monitor.env file not found"; return 1; }
    source $GRAPHDIR/envs/monitor.env

    # create volume for prometheus configuration files
    if ! volume-exists graph-monitor_prometheus-config; then
        docker volume create graph-monitor_prometheus-config
    fi
    cp $GRAPHDIR/prometheus/alert.rules /var/lib/docker/volumes/graph-monitor_prometheus-config/_data/alert.rules
    # envsubst < $GRAPHDIR/prometheus/prometheus.yml > /var/lib/docker/volumes/graph-monitor_prometheus-config/_data/prometheus.yml
    PROMETHEUS_CONFIG="/var/lib/docker/volumes/graph-monitor_prometheus-config/_data/prometheus.yml"
    cp $GRAPHDIR/prometheus/prometheus.yml $PROMETHEUS_CONFIG
    gen-prometheus-config $PROMETHEUS_CONFIG

    # create volume for grafana dashboards and datasoruces
    if ! volume-exists graph-monitor_grafana-provisioning; then
        docker volume create graph-monitor_grafana-provisioning
    else
        rm -rf /var/lib/docker/volumes/graph-monitor_grafana-provisioning/_data/*
    fi
    cp -R $GRAPHDIR/grafana/dashboards/ $GRAPHDIR/grafana/datasources/ /var/lib/docker/volumes/graph-monitor_grafana-provisioning/_data

    # create volume for alertmanager configuration file
    if ! volume-exists graph-monitor_alertmanager-config; then
        docker volume create graph-monitor_alertmanager-config
    fi
    cp $GRAPHDIR/alertmanager/config.yml /var/lib/docker/volumes/graph-monitor_alertmanager-config/_data

    # start monitor services
    COMPOSE_FILE=$GRAPHDIR/services/monitor.yml \
    COMPOSE_IGNORE_ORPHANS=True \
    docker compose --env-file $GRAPHDIR/envs/monitor.env up -d --force-recreate --build

    if [ -n "${NODE_NETWORK}" ]; then
        docker network connect ${NODE_NETWORK} graph-monitor-prometheus && docker network connect ${NODE_NETWORK} graph-monitor-grafana
    fi

    if [ -n "${INDEXER_NETWORK}" ]; then
        echo $INDEXER_NETWORK
        docker network connect ${INDEXER_NETWORK} graph-monitor-prometheus
    fi

    if [ -n "${MONITOR_HOST}" ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running" ; return; }
        docker network connect reverse-proxy graph-monitor-prometheus && docker network connect reverse-proxy graph-monitor-grafana
        [ -f /var/lib/docker/volumes/reverse-proxy_htpasswd/_data/${PROMETHEUS_HOST:-prometheus.${MONITOR_HOST}} ] || htpasswd -c -b /var/lib/docker/volumes/reverse-proxy_htpasswd/_data/${PROMETHEUS_HOST:-prometheus.${MONITOR_HOST}} $PROMETHEUS_USER $PROMETHEUS_PASS
    fi

    # sleep 5
    # docker exec -it ${DB_NODE_URL} psql -U ${DB_NODE_USER} ${DB_NODE_NAME} -c "refresh materialized view info.subgraph_sizes;"
}

graphmonitor-install() {
    whiptail --title "Graph Setup" --yesno "Install graph monitor?" 8 78 || { echo "User exit"; return; }
    monitor-start
}


# -----------------------------------------------
# --- INSTALLATION -----------------------------
# -----------------------------------------------
if [ "${1}" != "--source" ]; then
    apt update && apt install -y whiptail
    whiptail --title "Graph Setup" --yesno "Install graph setup?" 8 78 || { echo "User exit"; exit 1; }

    basics-install || { echo "Error: could not install basic tools"; exit 1; }

    docker-install || { echo "Error: could not install Docker"; exit 1; }

    nodejs-install || { echo "Error: could not install Node.js"; exit 1; }

    graphnode-install || { echo "Error: could not install graph node"; exit 1; }

    graphindexer-install || { echo "Error: could not install graph indexer"; exit 1; }

    graphmonitor-install || { echo "Error: could not install graph monitor"; exit 1; }

    if ! grep -q "#graph-setup" ~/.bashrc; then
        echo "Modifying .bashrc ..."
        echo -e "\n" >> ~/.bashrc
        echo "#graph-setup" >> ~/.bashrc
        echo "export GRAPH_DIR=$GRAPHDIR" >> ~/.bashrc
        echo 'source $GRAPH_DIR/utils/manage' >> ~/.bashrc
        source ~/.bashrc
    fi
fi
