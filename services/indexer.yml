version: '3.9'

x-logging:
  &default-logging
  options:
    max-file: '1'
    compress: 'false'
  driver: local

volumes:
  db-indexer:
  db-socket:
    name: ${COMPOSE_PROJECT_NAME}_db-socket
    external: true
  cli-data:
  cli-history:
  db-autoagora:
  rabbitmq_etc:
  rabbitmq_data:

networks:
  indexer:
    name: ${COMPOSE_PROJECT_NAME}-indexer
    external: true

services:
# AGENT
  indexer-agent:
    image: ghcr.io/graphprotocol/indexer-agent:${INDEXER_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}-indexer-agent
    networks:
      - indexer
    expose:
      - 7300
      - 8000
      - 8001
      - 8002
    depends_on:
      - postgres-indexer
    environment:
      INDEXER_AGENT_ETHEREUM: ${TXN_RPC}
      INDEXER_AGENT_ETHEREUM_NETWORK: ${ETHEREUM_NETWORK}
      INDEXER_AGENT_INDEXER_ADDRESS: ${STAKING_ADDRESS}
      INDEXER_AGENT_INDEXER_GEO_COORDINATES: ${GEO_COORDINATES}
      INDEXER_AGENT_MNEMONIC: ${OPERATOR_MNEMONIC}
      # INDEXER_AGENT_NETWORK_SUBGRAPH_DEPLOYMENT: ${NETWORK_SUBGRAPH_DEPLOYMENT}
      # INDEXER_AGENT_OFFCHAIN_SUBGRAPHS: ${INDEXER_AGENT_OFFCHAIN_SUBGRAPHS}
      INDEXER_AGENT_MULTINETWORK_MODE: ${MULTINETWORK_MODE}
      INDEXER_AGENT_NETWORK_SUBGRAPH_ENDPOINT: ${NETWORK_SUBGRAPH_ENDPOINT}
      INDEXER_AGENT_COLLECT_RECEIPTS_ENDPOINT: ${COLLECT_RECEIPTS_ENDPOINT}
      INDEXER_AGENT_GRAPH_NODE_QUERY_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-query-node:8000
      INDEXER_AGENT_GRAPH_NODE_STATUS_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-index-node:8030/graphql
      INDEXER_AGENT_GRAPH_NODE_ADMIN_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-index-node:8020
      INDEXER_AGENT_PUBLIC_INDEXER_URL: https://${INDEX_HOST}/
      INDEXER_AGENT_INDEX_NODE_IDS: index_node
      INDEXER_AGENT_POSTGRES_HOST: ${COMPOSE_PROJECT_NAME}-postgres-indexer
      INDEXER_AGENT_POSTGRES_USERNAME: ${DB_INDEXER_USER}
      INDEXER_AGENT_POSTGRES_PASSWORD: ${DB_INDEXER_PASS}
      INDEXER_AGENT_POSTGRES_DATABASE: ${DB_INDEXER_NAME}
      INDEXER_AGENT_EPOCH_SUBGRAPH_ENDPOINT: ${EPOCH_SUBGRAPH_ENDPOINT}
      INDEXER_AGENT_DAI_CONTRACT: ${DAI_CONTRACT}
      INDEXER_AGENT_INJECT_DAI: ${INJECT_DAI:-true}
      INDEXER_AGENT_GAS_PRICE_MAX: ${GAS_PRICE_MAX:-100}
      INDEXER_AGENT_REBATE_CLAIM_THRESHOLD: ${REBATE_CLAIM_THRESHOLD:-200}
      INDEXER_AGENT_REBATE_CLAIM_BATCH_THRESHOLD: ${REBATE_CLAIM_BATCH_THRESHOLD:-2000}
      INDEXER_AGENT_REBATE_CLAIM_MAX_BATCH_SIZE: ${REBATE_CLAIM_MAX_BATCH_SIZE:-100}
      INDEXER_AGENT_VOUCHER_REDEMPTION_THRESHOLD: ${VOUCHER_REDEMPTION_THRESHOLD:-200}
      INDEXER_AGENT_VOUCHER_REDEMPTION_BATCH_THRESHOLD: ${VOUCHER_REDEMPTION_BATCH_THRESHOLD:-2000}
      INDEXER_AGENT_VOUCHER_REDEMPTION_MAX_BATCH_SIZE: ${VOUCHER_REDEMPTION_MAX_BATCH_SIZE:-100}
      INDEXER_AGENT_ALLOCATION_MANAGEMENT: ${ALLOCATION_MANAGEMENT}
    restart: unless-stopped
    logging: *default-logging

# SERVICE
  indexer-service:
    image: ghcr.io/graphprotocol/indexer-service:${INDEXER_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}-indexer-service
    profiles: ["no-autoagora"]
    networks:
      - indexer
    expose:
      - 7300
      - 7600
    depends_on:
      - indexer-agent
      - postgres-indexer
    environment:
      INDEXER_SERVICE_ETHEREUM: ${TXN_RPC}
      INDEXER_SERVICE_ETHEREUM_NETWORK: ${ETHEREUM_NETWORK}
      INDEXER_SERVICE_INDEXER_ADDRESS: ${STAKING_ADDRESS}
      INDEXER_SERVICE_MNEMONIC: ${OPERATOR_MNEMONIC}
      INDEXER_SERVICE_PORT: 7600
      # INDEXER_SERVICE_NETWORK_SUBGRAPH_DEPLOYMENT: ${NETWORK_SUBGRAPH_DEPLOYMENT}
      INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT: ${NETWORK_SUBGRAPH_ENDPOINT}
      INDEXER_SERVICE_CLIENT_SIGNER_ADDRESS: ${CLIENT_SIGNER_ADDRESS}
      INDEXER_SERVICE_GRAPH_NODE_QUERY_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-query-node:8000
      INDEXER_SERVICE_GRAPH_NODE_STATUS_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-index-node:8030/graphql
      INDEXER_SERVICE_POSTGRES_HOST: ${COMPOSE_PROJECT_NAME}-postgres-indexer
      INDEXER_SERVICE_POSTGRES_USERNAME: ${DB_INDEXER_USER}
      INDEXER_SERVICE_POSTGRES_PASSWORD: ${DB_INDEXER_PASS}
      INDEXER_SERVICE_POSTGRES_DATABASE: ${DB_INDEXER_NAME}
      VIRTUAL_HOST: ${INDEX_HOST}
      VIRTUAL_PORT: 7600
      LETSENCRYPT_HOST: ${INDEX_HOST}
    restart: unless-stopped
    logging: *default-logging

# CLI
  indexer-cli:
    build:
      args:
        VERSION: ${INDEXER_VERSION}
        PROJECT: ${COMPOSE_PROJECT_NAME}
      context: ../cli
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-indexer-cli
    networks:
      - indexer
    depends_on:
      - indexer-agent
    tty: true
    volumes:
      - cli-data:/root/data
      - cli-history:/history
    restart: unless-stopped
    logging: *default-logging

# DATABASE
  postgres-indexer:
    image: postgres:${DB_INDEXER_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}-postgres-indexer
    networks:
      - indexer
    expose:
      - 5432
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    environment:
      POSTGRES_USER: ${DB_INDEXER_USER}
      POSTGRES_PASSWORD: ${DB_INDEXER_PASS}
      POSTGRES_DB: ${DB_INDEXER_NAME}
      # PGDATA: "/data/${COMPOSE_PROJECT_NAME}-postgres-indexer"
    volumes:
      - db-indexer:/var/lib/postgresql/data
      # - ./data/${COMPOSE_PROJECT_NAME}-postgres-indexer:/var/lib/postgresql/data
    restart: unless-stopped
    logging: *default-logging

# AUTOAGORA
  autoagora:
    image: ghcr.io/semiotic-ai/autoagora:v2.0.0
    container_name: ${COMPOSE_PROJECT_NAME}-autoagora
    networks:
      - indexer
    profiles: ["autoagora"]
    expose:
      - 8000
    volumes:
      - db-socket:/var/run/postgresql
    depends_on:
      - autoagora-indexer-service
      - postgres-autoagora
      - rabbitmq
      - autoagora-processor
    environment:
      INDEXER_AGENT_MGMT_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-indexer-agent:8000
      INDEXER_SERVICE_METRICS_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-indexer-service:7300/metrics
      POSTGRES_HOST: ${COMPOSE_PROJECT_NAME}-postgres-autoagora
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ${DB_AUTOAGORA_NAME}
      POSTGRES_USERNAME: ${DB_AUTOAGORA_USER}
      POSTGRES_PASSWORD: ${DB_AUTOAGORA_PASS}
      LOG_LEVEL: DEBUG
      JSON_LOGS: "true"
    logging: *default-logging
    restart: unless-stopped

# AUTOAGORA INDEXER SERVICE
  autoagora-indexer-service:
    image: ghcr.io/semiotic-ai/autoagora-indexer-service:v0.1.2-${INDEXER_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}-indexer-service
    depends_on:
      - indexer-agent
      - postgres-indexer
    networks:
      - indexer
    profiles: ["autoagora"]
    expose:
      - 7300
      - 7600
    environment:
      INDEXER_SERVICE_ETHEREUM: ${TXN_RPC}
      INDEXER_SERVICE_ETHEREUM_NETWORK: ${ETHEREUM_NETWORK}
      INDEXER_SERVICE_INDEXER_ADDRESS: ${STAKING_ADDRESS}
      INDEXER_SERVICE_MNEMONIC: ${OPERATOR_MNEMONIC}
      INDEXER_SERVICE_PORT: 7600
      # INDEXER_SERVICE_NETWORK_SUBGRAPH_DEPLOYMENT: ${NETWORK_SUBGRAPH_DEPLOYMENT}
      INDEXER_SERVICE_NETWORK_SUBGRAPH_ENDPOINT: ${NETWORK_SUBGRAPH_ENDPOINT}
      INDEXER_SERVICE_CLIENT_SIGNER_ADDRESS: ${CLIENT_SIGNER_ADDRESS}
      INDEXER_SERVICE_GRAPH_NODE_QUERY_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-query-node:8000
      INDEXER_SERVICE_GRAPH_NODE_STATUS_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-index-node:8030/graphql
      INDEXER_SERVICE_POSTGRES_HOST: ${COMPOSE_PROJECT_NAME}-postgres-indexer
      INDEXER_SERVICE_POSTGRES_USERNAME: ${DB_INDEXER_USER}
      INDEXER_SERVICE_POSTGRES_PASSWORD: ${DB_INDEXER_PASS}
      INDEXER_SERVICE_POSTGRES_DATABASE: ${DB_INDEXER_NAME}
      VIRTUAL_HOST: ${INDEX_HOST}
      VIRTUAL_PORT: 7600
      LETSENCRYPT_HOST: ${INDEX_HOST}
      RABBITMQ_HOST: ${COMPOSE_PROJECT_NAME}-rabbitmq
      RABBITMQ_USERNAME: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
    logging: *default-logging
    restart: unless-stopped

# AUTOAGORA PROCESSOR
  autoagora-processor:
    image: ghcr.io/semiotic-ai/autoagora-processor:v1.0.1
    container_name: ${COMPOSE_PROJECT_NAME}-autoagora-processor
    networks:
      - indexer
    profiles: ["autoagora"]
    volumes:
      - db-socket:/var/run/postgresql
    depends_on:
      - autoagora-indexer-service
      - postgres-autoagora
      - rabbitmq
    environment:
      RABBITMQ_HOST: ${COMPOSE_PROJECT_NAME}-rabbitmq
      RABBITMQ_USERNAME: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASS}
      GRAPH_NODE_QUERY_ENDPOINT: http://${COMPOSE_PROJECT_NAME}-query-node:8000
      GRAPH_POSTGRES_HOST: ${COMPOSE_PROJECT_NAME}-postgres-node
      GRAPH_POSTGRES_DATABASE: ${DB_NODE_NAME}
      GRAPH_POSTGRES_USERNAME: ${DB_NODE_USER}
      GRAPH_POSTGRES_PASSWORD: ${DB_NODE_PASS}
      LOG_LEVEL: DEBUG
      POSTGRES_HOST: ${COMPOSE_PROJECT_NAME}-postgres-autoagora
      POSTGRES_DATABASE: ${DB_AUTOAGORA_NAME}
      POSTGRES_USERNAME: ${DB_AUTOAGORA_USER}
      POSTGRES_PASSWORD: ${DB_AUTOAGORA_PASS}
    logging: *default-logging
    restart: unless-stopped

# AUTOAGORA DATABASE
  postgres-autoagora:
    image: postgres:${DB_AUTOAGORA_VERSION}
    container_name: ${COMPOSE_PROJECT_NAME}-postgres-autoagora
    networks:
      - indexer
    profiles: ["autoagora"]
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_AUTOAGORA_USER}
      POSTGRES_PASSWORD: ${DB_AUTOAGORA_PASS}
      POSTGRES_DB: ${DB_AUTOAGORA_NAME}
    volumes:
      - db-autoagora:/var/lib/postgresql/data
    expose:
      - 5432
    logging: *default-logging

# RABBITMQ
  rabbitmq:
    image: rabbitmq:3.11
    container_name: ${COMPOSE_PROJECT_NAME}-rabbitmq
    networks:
      - indexer
    profiles: ["autoagora"]
    volumes:
      - rabbitmq_etc:/etc/rabbitmq/
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    expose:
      - 5672
      - 15672
    restart: unless-stopped