#!/bin/bash
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. $DIR/docker
. $DIR/configure

graph-start() {
    source $GRAPH_DIR/.env.$1
    if $AUTOAGORA; then 
        COMPOSE_PROFILES=autoagora
    else
        COMPOSE_PROFILES=no-autoagora
    fi
    export PROJECT=$COMPOSE_PROJECT_NAME

    case $2 in
        "node")
            echo "Start graph NODE"
            # create node configuration volume
            if ! volume-exists ${PROJECT}_node-config; then
                docker volume create ${PROJECT}_node-config
            fi

            # generate graph node configuration files
            NODE_CONFIG_FILE=/var/lib/docker/volumes/${PROJECT}_node-config/_data/config.toml
            generate-node-config $NODE_CONFIG_FILE

            # start docker compose
            COMPOSE_FILE=$GRAPH_DIR/services/node.yml \
            COMPOSE_PROFILES=$COMPOSE_PROFILES \
            COMPOSE_IGNORE_ORPHANS=True \
            docker compose --env-file $GRAPH_DIR/.env.$1 up -d --force-recreate --build
            
            # attach graph node to local chains
            for node in "${CHAIN_NAME[@]}"
            do
            if [ $node == 'mainnet' ]; then 
                node=ethereum 
            fi
            if [ "$(docker network ls -f name=$node -q)" ]; then
                docker network connect $node ${PROJECT}-index-node
                docker network connect $node ${PROJECT}-query-node
            fi
            done
            ;;
        "indexer")
            echo "Starting graph INDEXER"
            COMPOSE_FILE=$GRAPH_DIR/services/indexer.yml \
            COMPOSE_PROFILES=$COMPOSE_PROFILES \
            COMPOSE_IGNORE_ORPHANS=True \
            docker compose --env-file $GRAPH_DIR/.env.$1 up -d --force-recreate --build

            # cli history
            if [ ! -f /var/lib/docker/volumes/${PROJECT}_cli-history/_data/.bash_history ]; then
                touch /var/lib/docker/volumes/${PROJECT}_cli-history/_data/.bash_history
            fi
            ;;
        "monitor")
            echo "Starting graph MONITOR"

            # Prometheus
            if ! volume-exists ${PROJECT}_prometheus-config; then
                docker volume create ${PROJECT}_prometheus-config
            else
                rm -rf /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/alert.rules /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/prometheus.yml
            fi
            envsubst '${PROJECT}' < prometheus/alert.rules > /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/alert.rules
            envsubst < prometheus/prometheus.yml > /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/prometheus.yml
            
            # Grafana
            if ! volume-exists ${PROJECT}_grafana-provisioning; then
                docker volume create ${PROJECT}_grafana-provisioning
            else
                rm -rf /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data/*
            fi
            cp -R grafana/dashboards/ grafana/datasources/ /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data
            envsubst < grafana/dashboards/indexing-performance-metrics.json > /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data/dashboards/indexing-performance-metrics.json
            
            # Alertmanager
            if ! volume-exists ${PROJECT}_alertmanager-config; then
                docker volume create ${PROJECT}_alertmanager-config
                cp alertmanager/config.yml /var/lib/docker/volumes/${PROJECT}_alertmanager-config/_data
            fi

            COMPOSE_FILE=$GRAPH_DIR/services/monitor.yml \
            COMPOSE_PROFILES=$COMPOSE_PROFILES \
            COMPOSE_IGNORE_ORPHANS=True \
            docker compose --env-file $GRAPH_DIR/.env.$1 up -d --force-recreate --build
            ;;
        *)
            echo "Starting graph ALL"
            COMPOSE_FILE=$GRAPH_DIR/services/node.yml:$GRAPH_DIR/services/indexer.yml:$GRAPH_DIR/services/monitor.yml \
            COMPOSE_PROFILES=$COMPOSE_PROFILES \
            docker compose --env-file $GRAPH_DIR/.env.$1 up -d --force-recreate --build
            ;;
    esac

    unset PROJECT
}

graph-stop() {
    source $GRAPH_DIR/.env.$1
    if $AUTOAGORA; then 
        COMPOSE_PROFILES=autoagora
    else
        COMPOSE_PROFILES=no-autoagora
    fi

    case $2 in
        "node")
            echo "Stopping graph NODE"
            COMPOSE_FILE=$GRAPH_DIR/services/node.yml docker compose --env-file $GRAPH_DIR/.env.$1 stop
            ;;
        "indexer")
            echo "Stopping graph INDEXER"
            COMPOSE_FILE=$GRAPH_DIR/services/indexer.yml COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file $GRAPH_DIR/.env.$1 stop
            ;;
        "monitor")
            echo "Stopping graph MONITOR"
            COMPOSE_FILE=$GRAPH_DIR/services/monitor.yml docker compose --env-file $GRAPH_DIR/.env.$1 stop
            ;;
        *)
            echo "Stopping graph ALL"
            tmux kill-session -t $1
            COMPOSE_FILE=$GRAPH_DIR/services/node.yml:$GRAPH_DIR/services/indexer.yml:$GRAPH_DIR/services/monitor.yml \
            COMPOSE_PROFILES=$COMPOSE_PROFILES \
            docker compose --env-file $GRAPH_DIR/.env.$1 stop
            ;;
    esac
}

graph-connect() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Define 1. indexer name and 2. proxy service" >&2
        exit 1
    fi

    # Attach proxy to indexer network
    for net in $(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${2}-proxy)
    do
      if [ "$net" = ${1}-indexer ]; then
        echo "Proxy already connected" >&2
        return
      fi
    done

    docker network connect ${1}-indexer ${2}-proxy
}

graph-disconnect() {
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Define 1. indexer name and 2. proxy service" >&2
        exit 1
    fi

    # Attach proxy to indexer network
    for net in $(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${2}-proxy)
    do
      if [ "$net" = ${1}-indexer ]; then
        docker network disconnect ${1}-indexer ${2}-proxy
        return
      fi
    done

    echo "Proxy not connected" >&2
}

graph-monitor() {
    # check if container running
    if [ -z "$( docker ps | grep $1-indexer-cli )" ]; then
        echo "Project not found."
        return
    fi

    # Check if session name exists
    SESSIONEXISTS=$(tmux list-sessions | grep $1)

    # Set up monitoring interface
    if [ "$SESSIONEXISTS" = "" ];
    then
        # Create new session
        tmux new-session -d -s $1

        # CLI Docker Container
        tmux rename-window -t 0 'indexer-cli'
        tmux send-keys -t "indexer-cli" "docker exec -it ${1}-indexer-cli /bin/bash"  C-m

        # Index-Node Docker Container
        tmux new-window -t $1:1 -n 'graphman'
        tmux send-keys -t "graphman" "docker exec -it ${1}-query-node /bin/bash"  C-m

        # Indexer Agent Docker Log
        tmux new-window -t $1:2 -n 'indexer-agent'
        tmux send-keys -t 'indexer-agent' "docker logs ${1}-indexer-agent --tail 10 -f | pino-pretty -c -t" C-m

        # Indexer Service Docker Log
        tmux new-window -t $1:3 -n 'indexer-service'
        tmux send-keys -t 'indexer-service' "docker logs ${1}-indexer-service --tail 10 -f | pino-pretty -c -t" C-m

        # Index Node Docker Log
        tmux new-window -t $1:4 -n 'index-node'
        tmux send-keys -t 'index-node' "docker logs ${1}-index-node --tail 10 -f | pino-pretty -c -t" C-m

        # Query Node Docker Log
        tmux new-window -t $1:5 -n 'query-node'
        tmux send-keys -t 'query-node' "docker logs ${1}-query-node --tail 10 -f | pino-pretty -c -t" C-m
    fi
    tmux attach-session -t $1:0
}