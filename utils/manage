#!/bin/

graph-start() {
    source .env.$1

    if $AUTOAGORA; then 
        COMPOSE_FILE=services/graph-setup.yml:services/autoagora.yml
        COMPOSE_PROFILES=autoagora
    else
        COMPOSE_FILE=services/graph-setup.yml
        COMPOSE_PROFILES=no-autoagora
    fi

    case $2 in
        "proxy")
            COMPOSE_PROJECT_NAME=proxy COMPOSE_PROFILES=$PROXY EMAIL=email@$HOST WHITELIST=$WHITELIST docker compose -f services/reverse-proxy.yml up -d --remove-orphans --force-recreate --build
            ;;
        "node")
            source utils/configure
            NODE_CONFIG_FILE=/var/lib/docker/volumes/${COMPOSE_PROJECT_NAME}_node-config/_data/config.toml
            generate-node-config $NODE_CONFIG_FILE
            COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file .env.$1 up -d --remove-orphans --force-recreate --build index-node query-node
            for node in "${CHAIN_NAME[@]}"
            do
            if [ $node == 'mainnet' ]; then 
                node=ethereum 
            fi
            if [ "$(docker network ls -f name=$node -q)" ]; then
                docker network connect $node ${COMPOSE_PROJECT_NAME}-index-node
                docker network connect $node ${COMPOSE_PROJECT_NAME}-query-node
            fi
            done
            ;;
        "indexer")
            COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file .env.$1 up -d --remove-orphans --force-recreate --build indexer-agent indexer-service indexer-cli
            ;;
        "monitor")
            export PROJECT=$COMPOSE_PROJECT_NAME
            
            # Prometheus Config
            rm -rf /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/alert.rules /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/prometheus.yml
            envsubst '${PROJECT}' < prometheus/alert.rules > /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/alert.rules
            envsubst < prometheus/prometheus.yml > /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/prometheus.yml
            
            # Grafana Config
            rm -rf /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data/*
            cp -R grafana/dashboards/ grafana/datasources/ /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data
            envsubst < grafana/dashboards/indexing-performance-metrics.json > /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data/dashboards/indexing-performance-metrics.json

            COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file .env.$1 up -d --force-recreate --build grafana prometheus
            unset PROJECT
            ;;
        "all")
            source utils/configure
            NODE_CONFIG_FILE=/var/lib/docker/volumes/${COMPOSE_PROJECT_NAME}_node-config/_data/config.toml
            generate-node-config $NODE_CONFIG_FILE

            export PROJECT=$COMPOSE_PROJECT_NAME
            
            # Prometheus Config
            rm -rf /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/alert.rules /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/prometheus.yml
            envsubst '${PROJECT}' < prometheus/alert.rules > /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/alert.rules
            envsubst < prometheus/prometheus.yml > /var/lib/docker/volumes/${PROJECT}_prometheus-config/_data/prometheus.yml
            
            # Grafana Config
            rm -rf /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data/*
            cp -R grafana/dashboards/ grafana/datasources/ /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data
            envsubst < grafana/dashboards/indexing-performance-metrics.json > /var/lib/docker/volumes/${PROJECT}_grafana-provisioning/_data/dashboards/indexing-performance-metrics.json
            
            COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file .env.$1 up -d --force-recreate --build

            for node in "${CHAIN_NAME[@]}"
            do
            if [ $node == 'mainnet' ]; then 
                node=ethereum 
            fi
            if [ "$(docker network ls -f name=$node -q)" ]; then
                docker network connect $node ${COMPOSE_PROJECT_NAME}-index-node
                docker network connect $node ${COMPOSE_PROJECT_NAME}-query-node
            fi
            done
            ;;
    esac
}

graph-stop() {
    source .env.$1

    if $AUTOAGORA; then 
        COMPOSE_FILE=services/graph-setup.yml:services/autoagora.yml
        COMPOSE_PROFILES=autoagora
    else
        COMPOSE_FILE=services/graph-setup.yml
        COMPOSE_PROFILES=no-autoagora
    fi

    case $2 in
        "node")
            COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file .env.$1 stop index-node query-node
            ;;
        "indexer")
            COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file .env.$1 stop indexer-agent indexer-cli indexer-service
            ;;
        "monitor")
            COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROFILES=$COMPOSE_PROFILES docker compose --env-file .env.$1 stop grafana prometheus
            ;;
    esac
}

graph-monitor() {
    # Check if session name exists
    SESSIONEXISTS=$(tmux list-sessions | grep $1)

    # Set up monitoring interface
    if [ "$SESSIONEXISTS" = "" ]
    then
        # Create new session
        tmux new-session -d -s $1

        # CLI Docker Container
        tmux rename-window -t 0 'indexer-cli'
        tmux send-keys -t "indexer-cli" "docker exec -it ${1}-indexer-cli /bin/bash"  C-m

        # Index-Node Docker Container
        tmux new-window -t $1:1 -n 'graphman'
        tmux send-keys -t "graphman" "docker exec -it ${1}-query-node /bin/bash"  C-m

        # Indexer Agent Docker Log
        tmux new-window -t $1:2 -n 'indexer-agent'
        tmux send-keys -t 'indexer-agent' "docker logs ${1}-indexer-agent --tail 10 -f | pino-pretty -c -t" C-m

        # Indexer Service Docker Log
        tmux new-window -t $1:3 -n 'indexer-service'
        tmux send-keys -t 'indexer-service' "docker logs ${1}-indexer-service --tail 10 -f | pino-pretty -c -t" C-m

        # Index Node Docker Log
        tmux new-window -t $1:4 -n 'index-node'
        tmux send-keys -t 'index-node' "docker logs ${1}-index-node --tail 10 -f | pino-pretty -c -t" C-m

        # Query Node Docker Log
        tmux new-window -t $1:5 -n 'query-node'
        tmux send-keys -t 'query-node' "docker logs ${1}-query-node --tail 10 -f | pino-pretty -c -t" C-m
    fi
    tmux attach-session -t $1:0
}